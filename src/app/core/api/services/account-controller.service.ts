/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createAccount } from '../fn/account-controller/create-account';
import { CreateAccount$Params } from '../fn/account-controller/create-account';
import { createExpense } from '../fn/account-controller/create-expense';
import { CreateExpense$Params } from '../fn/account-controller/create-expense';
import { createTransaction } from '../fn/account-controller/create-transaction';
import { CreateTransaction$Params } from '../fn/account-controller/create-transaction';
import { finalizeExpense } from '../fn/account-controller/finalize-expense';
import { FinalizeExpense$Params } from '../fn/account-controller/finalize-expense';
import { getAccounts } from '../fn/account-controller/get-accounts';
import { GetAccounts$Params } from '../fn/account-controller/get-accounts';
import { getExpenses } from '../fn/account-controller/get-expenses';
import { GetExpenses$Params } from '../fn/account-controller/get-expenses';
import { getMyAccounts } from '../fn/account-controller/get-my-accounts';
import { GetMyAccounts$Params } from '../fn/account-controller/get-my-accounts';
import { getMyExpenses } from '../fn/account-controller/get-my-expenses';
import { GetMyExpenses$Params } from '../fn/account-controller/get-my-expenses';
import { getMyTransactions } from '../fn/account-controller/get-my-transactions';
import { GetMyTransactions$Params } from '../fn/account-controller/get-my-transactions';
import { getTransactions } from '../fn/account-controller/get-transactions';
import { GetTransactions$Params } from '../fn/account-controller/get-transactions';
import { settleExpense } from '../fn/account-controller/settle-expense';
import { SettleExpense$Params } from '../fn/account-controller/settle-expense';
import { SuccessResponseAccountDetail } from '../models/success-response-account-detail';
import { SuccessResponseExpenseDetail } from '../models/success-response-expense-detail';
import { SuccessResponsePaginateAccountDetail } from '../models/success-response-paginate-account-detail';
import { SuccessResponsePaginateExpenseDetail } from '../models/success-response-paginate-expense-detail';
import { SuccessResponsePaginateTransactionDetail } from '../models/success-response-paginate-transaction-detail';
import { SuccessResponseTransactionDetail } from '../models/success-response-transaction-detail';
import { updateAccount } from '../fn/account-controller/update-account';
import { UpdateAccount$Params } from '../fn/account-controller/update-account';
import { updateExpense } from '../fn/account-controller/update-expense';
import { UpdateExpense$Params } from '../fn/account-controller/update-expense';
import { updateMyAccount } from '../fn/account-controller/update-my-account';
import { UpdateMyAccount$Params } from '../fn/account-controller/update-my-account';

@Injectable({ providedIn: 'root' })
export class AccountControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createTransaction()` */
  static readonly CreateTransactionPath = '/api/account/transaction/create';

  /**
   * Create new transaction.
   *
   * Authorities : hasAuthority('SCOPE_create:transaction')
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTransaction()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTransaction$Response(params: CreateTransaction$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponseTransactionDetail>> {
    return createTransaction(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new transaction.
   *
   * Authorities : hasAuthority('SCOPE_create:transaction')
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTransaction$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTransaction(params: CreateTransaction$Params, context?: HttpContext): Observable<SuccessResponseTransactionDetail> {
    return this.createTransaction$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponseTransactionDetail>): SuccessResponseTransactionDetail => r.body)
    );
  }

  /** Path part for operation `createExpense()` */
  static readonly CreateExpensePath = '/api/account/expense/create';

  /**
   * Create new expense.
   *
   * Authorities : hasAuthority('SCOPE_create:expense')<br><br>Note: If expense item is supplied then create expense item
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createExpense()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createExpense$Response(params: CreateExpense$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponseExpenseDetail>> {
    return createExpense(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new expense.
   *
   * Authorities : hasAuthority('SCOPE_create:expense')<br><br>Note: If expense item is supplied then create expense item
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createExpense$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createExpense(params: CreateExpense$Params, context?: HttpContext): Observable<SuccessResponseExpenseDetail> {
    return this.createExpense$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponseExpenseDetail>): SuccessResponseExpenseDetail => r.body)
    );
  }

  /** Path part for operation `createAccount()` */
  static readonly CreateAccountPath = '/api/account/create';

  /**
   * Create new account.
   *
   * Authorities : hasAuthority('SCOPE_create:account')
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAccount$Response(params: CreateAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponseAccountDetail>> {
    return createAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * Create new account.
   *
   * Authorities : hasAuthority('SCOPE_create:account')
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAccount(params: CreateAccount$Params, context?: HttpContext): Observable<SuccessResponseAccountDetail> {
    return this.createAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponseAccountDetail>): SuccessResponseAccountDetail => r.body)
    );
  }

  /** Path part for operation `updateAccount()` */
  static readonly UpdateAccountPath = '/api/account/{id}/update';

  /**
   * Update account details.
   *
   * Authorities : hasAuthority('SCOPE_update:account')
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAccount$Response(params: UpdateAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponseAccountDetail>> {
    return updateAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * Update account details.
   *
   * Authorities : hasAuthority('SCOPE_update:account')
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAccount(params: UpdateAccount$Params, context?: HttpContext): Observable<SuccessResponseAccountDetail> {
    return this.updateAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponseAccountDetail>): SuccessResponseAccountDetail => r.body)
    );
  }

  /** Path part for operation `updateMyAccount()` */
  static readonly UpdateMyAccountPath = '/api/account/{id}/update/self';

  /**
   * Update account details of logged in user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMyAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMyAccount$Response(params: UpdateMyAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponseAccountDetail>> {
    return updateMyAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * Update account details of logged in user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMyAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMyAccount(params: UpdateMyAccount$Params, context?: HttpContext): Observable<SuccessResponseAccountDetail> {
    return this.updateMyAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponseAccountDetail>): SuccessResponseAccountDetail => r.body)
    );
  }

  /** Path part for operation `updateExpense()` */
  static readonly UpdateExpensePath = '/api/account/expense/{id}/update';

  /**
   * Update details of expense.
   *
   * Authorities : hasAuthority('SCOPE_update:expense')<br><br>Note: If new expense item is supplied (without id) then create expense item,If existing expense item is supplied (with id) then update expense item,Set remove attribute true in case expense item needs to be removed
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateExpense()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateExpense$Response(params: UpdateExpense$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponseExpenseDetail>> {
    return updateExpense(this.http, this.rootUrl, params, context);
  }

  /**
   * Update details of expense.
   *
   * Authorities : hasAuthority('SCOPE_update:expense')<br><br>Note: If new expense item is supplied (without id) then create expense item,If existing expense item is supplied (with id) then update expense item,Set remove attribute true in case expense item needs to be removed
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateExpense$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateExpense(params: UpdateExpense$Params, context?: HttpContext): Observable<SuccessResponseExpenseDetail> {
    return this.updateExpense$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponseExpenseDetail>): SuccessResponseExpenseDetail => r.body)
    );
  }

  /** Path part for operation `settleExpense()` */
  static readonly SettleExpensePath = '/api/account/expense/{id}/settle';

  /**
   * Settle expense.
   *
   * Authorities : hasAuthority('SCOPE_create:expense_settle')
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `settleExpense()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  settleExpense$Response(params: SettleExpense$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponseExpenseDetail>> {
    return settleExpense(this.http, this.rootUrl, params, context);
  }

  /**
   * Settle expense.
   *
   * Authorities : hasAuthority('SCOPE_create:expense_settle')
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `settleExpense$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  settleExpense(params: SettleExpense$Params, context?: HttpContext): Observable<SuccessResponseExpenseDetail> {
    return this.settleExpense$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponseExpenseDetail>): SuccessResponseExpenseDetail => r.body)
    );
  }

  /** Path part for operation `finalizeExpense()` */
  static readonly FinalizeExpensePath = '/api/account/expense/{id}/finalize';

  /**
   * Finalize expense.
   *
   * Authorities : hasAuthority('SCOPE_create:expense_final')
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `finalizeExpense()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  finalizeExpense$Response(params: FinalizeExpense$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponseExpenseDetail>> {
    return finalizeExpense(this.http, this.rootUrl, params, context);
  }

  /**
   * Finalize expense.
   *
   * Authorities : hasAuthority('SCOPE_create:expense_final')
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `finalizeExpense$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  finalizeExpense(params: FinalizeExpense$Params, context?: HttpContext): Observable<SuccessResponseExpenseDetail> {
    return this.finalizeExpense$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponseExpenseDetail>): SuccessResponseExpenseDetail => r.body)
    );
  }

  /** Path part for operation `getMyTransactions()` */
  static readonly GetMyTransactionsPath = '/api/account/{id}/transaction/self/list';

  /**
   * Retrieve list of transaction for a logged in user account.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyTransactions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTransactions$Response(params: GetMyTransactions$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponsePaginateTransactionDetail>> {
    return getMyTransactions(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve list of transaction for a logged in user account.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyTransactions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTransactions(params: GetMyTransactions$Params, context?: HttpContext): Observable<SuccessResponsePaginateTransactionDetail> {
    return this.getMyTransactions$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponsePaginateTransactionDetail>): SuccessResponsePaginateTransactionDetail => r.body)
    );
  }

  /** Path part for operation `getTransactions()` */
  static readonly GetTransactionsPath = '/api/account/{id}/transaction/list';

  /**
   * Retrieve list of transaction for an account.
   *
   * Authorities : hasAuthority('SCOPE_read:transactions')
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTransactions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactions$Response(params: GetTransactions$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponsePaginateTransactionDetail>> {
    return getTransactions(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve list of transaction for an account.
   *
   * Authorities : hasAuthority('SCOPE_read:transactions')
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTransactions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactions(params: GetTransactions$Params, context?: HttpContext): Observable<SuccessResponsePaginateTransactionDetail> {
    return this.getTransactions$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponsePaginateTransactionDetail>): SuccessResponsePaginateTransactionDetail => r.body)
    );
  }

  /** Path part for operation `getMyAccounts()` */
  static readonly GetMyAccountsPath = '/api/account/self/list';

  /**
   * Retrieves list of accounts of the logged in user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyAccounts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyAccounts$Response(params: GetMyAccounts$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponsePaginateAccountDetail>> {
    return getMyAccounts(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves list of accounts of the logged in user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyAccounts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyAccounts(params: GetMyAccounts$Params, context?: HttpContext): Observable<SuccessResponsePaginateAccountDetail> {
    return this.getMyAccounts$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponsePaginateAccountDetail>): SuccessResponsePaginateAccountDetail => r.body)
    );
  }

  /** Path part for operation `getAccounts()` */
  static readonly GetAccountsPath = '/api/account/list';

  /**
   * Retrieves list of accounts.
   *
   * Authorities : hasAuthority('SCOPE_read:accounts')
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAccounts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAccounts$Response(params: GetAccounts$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponsePaginateAccountDetail>> {
    return getAccounts(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieves list of accounts.
   *
   * Authorities : hasAuthority('SCOPE_read:accounts')
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAccounts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAccounts(params: GetAccounts$Params, context?: HttpContext): Observable<SuccessResponsePaginateAccountDetail> {
    return this.getAccounts$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponsePaginateAccountDetail>): SuccessResponsePaginateAccountDetail => r.body)
    );
  }

  /** Path part for operation `getExpenses()` */
  static readonly GetExpensesPath = '/api/account/expense/list';

  /**
   * Retrieve list of expenses.
   *
   * Authorities : hasAuthority('SCOPE_read:expenses')
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getExpenses()` instead.
   *
   * This method doesn't expect any request body.
   */
  getExpenses$Response(params: GetExpenses$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponsePaginateExpenseDetail>> {
    return getExpenses(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve list of expenses.
   *
   * Authorities : hasAuthority('SCOPE_read:expenses')
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getExpenses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getExpenses(params: GetExpenses$Params, context?: HttpContext): Observable<SuccessResponsePaginateExpenseDetail> {
    return this.getExpenses$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponsePaginateExpenseDetail>): SuccessResponsePaginateExpenseDetail => r.body)
    );
  }

  /** Path part for operation `getMyExpenses()` */
  static readonly GetMyExpensesPath = '/api/account/expense/list/self';

  /**
   * Retrieve list of expenses of logged in user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyExpenses()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyExpenses$Response(params: GetMyExpenses$Params, context?: HttpContext): Observable<StrictHttpResponse<SuccessResponsePaginateExpenseDetail>> {
    return getMyExpenses(this.http, this.rootUrl, params, context);
  }

  /**
   * Retrieve list of expenses of logged in user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyExpenses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyExpenses(params: GetMyExpenses$Params, context?: HttpContext): Observable<SuccessResponsePaginateExpenseDetail> {
    return this.getMyExpenses$Response(params, context).pipe(
      map((r: StrictHttpResponse<SuccessResponsePaginateExpenseDetail>): SuccessResponsePaginateExpenseDetail => r.body)
    );
  }

}
