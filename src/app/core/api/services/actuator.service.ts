/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { env } from '../fn/actuator/env';
import { Env$Params } from '../fn/actuator/env';
import { envToMatch } from '../fn/actuator/env-to-match';
import { EnvToMatch$Params } from '../fn/actuator/env-to-match';
import { health } from '../fn/actuator/health';
import { Health$Params } from '../fn/actuator/health';
import { healthPath } from '../fn/actuator/health-path';
import { HealthPath$Params } from '../fn/actuator/health-path';
import { Link } from '../models/link';
import { links } from '../fn/actuator/links';
import { Links$Params } from '../fn/actuator/links';
import { mappings } from '../fn/actuator/mappings';
import { Mappings$Params } from '../fn/actuator/mappings';
import { metrics } from '../fn/actuator/metrics';
import { Metrics$Params } from '../fn/actuator/metrics';
import { metricsRequiredMetricName } from '../fn/actuator/metrics-required-metric-name';
import { MetricsRequiredMetricName$Params } from '../fn/actuator/metrics-required-metric-name';


/**
 * Monitor and interact
 */
@Injectable({ providedIn: 'root' })
export class ActuatorService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `links()` */
  static readonly LinksPath = '/api/actuator';

  /**
   * Actuator root web endpoint.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `links()` instead.
   *
   * This method doesn't expect any request body.
   */
  links$Response(params?: Links$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: {
[key: string]: Link;
};
}>> {
    return links(this.http, this.rootUrl, params, context);
  }

  /**
   * Actuator root web endpoint.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `links$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  links(params?: Links$Params, context?: HttpContext): Observable<{
[key: string]: {
[key: string]: Link;
};
}> {
    return this.links$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: {
[key: string]: Link;
};
}>): {
[key: string]: {
[key: string]: Link;
};
} => r.body)
    );
  }

  /** Path part for operation `metrics()` */
  static readonly MetricsPath = '/api/actuator/metrics';

  /**
   * Actuator web endpoint 'metrics'.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `metrics()` instead.
   *
   * This method doesn't expect any request body.
   */
  metrics$Response(params?: Metrics$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return metrics(this.http, this.rootUrl, params, context);
  }

  /**
   * Actuator web endpoint 'metrics'.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `metrics$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  metrics(params?: Metrics$Params, context?: HttpContext): Observable<{
}> {
    return this.metrics$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `metricsRequiredMetricName()` */
  static readonly MetricsRequiredMetricNamePath = '/api/actuator/metrics/{requiredMetricName}';

  /**
   * Actuator web endpoint 'metrics-requiredMetricName'.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `metricsRequiredMetricName()` instead.
   *
   * This method doesn't expect any request body.
   */
  metricsRequiredMetricName$Response(params: MetricsRequiredMetricName$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return metricsRequiredMetricName(this.http, this.rootUrl, params, context);
  }

  /**
   * Actuator web endpoint 'metrics-requiredMetricName'.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `metricsRequiredMetricName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  metricsRequiredMetricName(params: MetricsRequiredMetricName$Params, context?: HttpContext): Observable<{
}> {
    return this.metricsRequiredMetricName$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `mappings()` */
  static readonly MappingsPath = '/api/actuator/mappings';

  /**
   * Actuator web endpoint 'mappings'.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `mappings()` instead.
   *
   * This method doesn't expect any request body.
   */
  mappings$Response(params?: Mappings$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return mappings(this.http, this.rootUrl, params, context);
  }

  /**
   * Actuator web endpoint 'mappings'.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `mappings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  mappings(params?: Mappings$Params, context?: HttpContext): Observable<{
}> {
    return this.mappings$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `health()` */
  static readonly HealthPath = '/api/actuator/health';

  /**
   * Actuator web endpoint 'health'.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `health()` instead.
   *
   * This method doesn't expect any request body.
   */
  health$Response(params?: Health$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return health(this.http, this.rootUrl, params, context);
  }

  /**
   * Actuator web endpoint 'health'.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `health$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  health(params?: Health$Params, context?: HttpContext): Observable<{
}> {
    return this.health$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `healthPath()` */
  static readonly HealthPathPath = '/api/actuator/health/**';

  /**
   * Actuator web endpoint 'health-path'.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `healthPath()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthPath$Response(params?: HealthPath$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return healthPath(this.http, this.rootUrl, params, context);
  }

  /**
   * Actuator web endpoint 'health-path'.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `healthPath$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  healthPath(params?: HealthPath$Params, context?: HttpContext): Observable<{
}> {
    return this.healthPath$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `env()` */
  static readonly EnvPath = '/api/actuator/env';

  /**
   * Actuator web endpoint 'env'.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `env()` instead.
   *
   * This method doesn't expect any request body.
   */
  env$Response(params?: Env$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return env(this.http, this.rootUrl, params, context);
  }

  /**
   * Actuator web endpoint 'env'.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `env$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  env(params?: Env$Params, context?: HttpContext): Observable<{
}> {
    return this.env$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `envToMatch()` */
  static readonly EnvToMatchPath = '/api/actuator/env/{toMatch}';

  /**
   * Actuator web endpoint 'env-toMatch'.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `envToMatch()` instead.
   *
   * This method doesn't expect any request body.
   */
  envToMatch$Response(params: EnvToMatch$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return envToMatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Actuator web endpoint 'env-toMatch'.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `envToMatch$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  envToMatch(params: EnvToMatch$Params, context?: HttpContext): Observable<{
}> {
    return this.envToMatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
